generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  guest
  staff
  admin
  super_admin
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String
  role           Role      @default(guest)

  regionId       Int?
  region         Region?   @relation(fields: [regionId], references: [id])

  contact        Contact?
  profile        Profile?

  fromMessages   Chat[]    @relation("FromMessages")
  toMessages     Chat[]    @relation("ToMessages")

  services       Service[]
  comments       Comment[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Contact {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  phone     String?
  telegram  String?
  whatsapp  String?
  email     String?
  instagram String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  avatar    String?
  bio       String?
}

model Region {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  users    User[]
  services Service[]
}

model Category {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  services ServiceCategory[]
}

model Service {
  id          String    @id @default(uuid())
  title       String
  description String
  price       Float
  isActive    Boolean   @default(true)

  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])

  regionId    Int
  region      Region    @relation(fields: [regionId], references: [id])

  categories  ServiceCategory[]
  comments    Comment[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ServiceCategory {
  id          String   @id @default(uuid())
  serviceId   String
  categoryId  Int

  service     Service  @relation(fields: [serviceId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])

  @@unique([serviceId, categoryId])
}

model Comment {
  id          String   @id @default(uuid())
  text        String
  rating      Int      @default(5)

  userId      String
  user        User     @relation(fields: [userId], references: [id])

  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])

  createdAt   DateTime @default(now())
}

model Chat {
  id        String   @id @default(uuid())
  fromId    String
  toId      String
  message   String
  createdAt DateTime @default(now())

  from      User     @relation("FromMessages", fields: [fromId], references: [id])
  to        User     @relation("ToMessages", fields: [toId], references: [id])
}
